* My Scripts
** Org-Agenda_with_Tip
#+begin_src emacs-lisp
(cd (getenv "HOME"))

(defun dj/org-agenda-with-tip (arg)
  "Show agenda for ARG days."
  (org-agenda-list arg)
  (let ((inhibit-read-only t)
	(pos (point)))
    (goto-char (point-max))
    (goto-char pos)))
#+end_src
** Dynamic Font Size
#+begin_src emacs-lisp
(defun dj/change-frame-font-size (fn)
  "Change the frame font size according to function FN."
  (let* ((font-name (frame-parameter nil 'font))
     (decomposed-font-name (x-decompose-font-name font-name))
     (font-size (string-to-number (aref decomposed-font-name 5))))
    (aset decomposed-font-name 5 (int-to-string (funcall fn font-size)))
    (set-frame-font (x-compose-font-name decomposed-font-name))))

(defun dj/frame-text-scale-increase ()
  "Increase the frame font size by 1."
  (interactive)
  (dj/change-frame-font-size '1+))

(defun dj/frame-text-scale-decrease ()
  "Decrease the frame font size by 1."
  (interactive)
  (dj/change-frame-font-size '1-))

(bind-keys
 ("C-+" . text-scale-increase)
 ("C--" . text-scale-decrease)
 ("s--" . dj/frame-text-scale-decrease)
 ("s-+" . dj/frame-text-scale-increase)
 ("s-=" . dj/frame-text-scale-increase))
#+end_src
** Transparency
 #+begin_src emacs-lisp
 (use-package ring
   :commands (dj/transparency-apply dj/transparency-next dj/transparency-previous
		     dj/transparency-cycle dj/transparency-add)
   :config
   (setq dj/transparency-ring
     (ring-convert-sequence-to-ring (list '(100 100) '(100 50) '(100 10) '(95 50) '(90 50) '(85 50)))
     dj/transparency
     (ring-ref dj/transparency-ring 0))

   (defun dj/transparency-apply (trans)
     "Apply the TRANS alpha value to the frame."
     (set-frame-parameter (selected-frame) 'alpha (setq dj/transparency trans)))

   (defun dj/transparency-next ()
     "Apply the next transparency value in the ring `dj/transparency-ring`."
     (interactive)
     (dj/transparency-apply (ring-next dj/transparency-ring dj/transparency)))

   (defun dj/transparency-previous ()
     "Apply the previous transparency value in the ring `dj/transparency-ring`."
     (interactive)
     (dj/transparency-apply (ring-previous dj/transparency-ring dj/transparency)))

   (defun dj/transparency-cycle ()
     "Cycle to the next transparency setting."
     (interactive)
     (dj/transparency-next))

   (defun dj/transparency-add (active inactive)
     "Add ACTIVE and INACTIVE transparency values to the ring."
     (interactive "nActive Transparency:\nnInactive Transparency:")
     (ring-insert+extend dj/transparency-ring (list active inactive) t)
     (dj/transparency-apply (list active inactive))))
 #+end_src
** Duplicate Line
*** Key Bindings
:PROPERTIES:
:ID:       053AD3F9-E892-4B14-B770-7B0122F32515
:END:
#+begin_src emacs-lisp
(global-set-key (kbd "C-d") 'dj/duplicate-line)      ;; Duplicate Line
#+end_src
*** Code
:PROPERTIES:
:ID:       04641334-7824-4ACE-BC5F-8502AFCF9C23
:END:
   #+begin_src emacs-lisp
   (defun dj/duplicate-line()
     (interactive)
     (move-beginning-of-line 1)
     (kill-line)
     (yank)
     (open-line 1)
     (next-line 1)
     (yank)
   )

   #+end_src
** Reload Config File
*** Key Bindings
:PROPERTIES:
:ID:       C2139E25-3D49-4066-A416-AAA80F4A8B9C
:END:
#+begin_src emacs-lisp
(global-set-key (kbd "C-c r") 'dj/reload-init-file)
#+end_src
*** Code
:PROPERTIES:
:ID:       301C3B60-AE60-4AAB-9BBE-9E19E8821F9A
:END:
 #+begin_src emacs-lisp
 (defun dj/reload-init-file ()
   (interactive)
   (load-file "~/.emacs.d/init.el"))
#+end_src
** Move Lines
#+begin_src emacs-lisp


(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

;(define-key input-decode-map "\e\eOA" [(meta up)])
;(define-key input-decode-map "\e\eOB" [(meta down)])

(global-set-key [(meta up)]  'move-line-up)
(global-set-key [(meta down)]  'move-line-down)
#+end_src
* Configurations
** Autoloads
#+begin_src emacs-lisp
(setq auto-mode-alist
      (append
       (list (cons "\\.org$" 'org-mode)
             (cons "\\.txt$" 'text-mode)
             (cons "\\.tex$" 'latex-mode)
             (cons "\\.sli$" 'latex-mode)
             (cons "\\.bib$" 'bibtex-mode)
             (cons "\\.epub$" 'nov-mode)
             
             (cons "\\.dss?s?l$" 'dsssl-mode)
             (cons "\\.css$" 'css-mode)

             (cons "\\.pl$" 'perl-mode)
             (cons "\\.cls$" 'perl-mode)
             (cons "\\.sup$" 'perl-mode)

             (cons "\\.py$" 'python-mode)
             (cons "\\.pdf$" 'pdf-view-mode)

             (cons "\\.rb$" 'ruby-mode)

             (cons "\\.3l$" 'nroff-mode)

             (cons "\\.ttl$" 'ttl-mode)
             (cons "\\.n3$" 'ttl-mode)

             (cons "\\.ts$" 'ng2-ts-mode)

             (cons "\\.rdf$" 'nxml-mode)
             (cons "\\.rnc$" 'rnc-mode)
             (cons "\\.rng$" 'nxml-mode)
             (cons "\\.xpd$" 'nxml-mode)
             (cons "\\.xml$" 'nxml-mode)
             (cons "\\.xpl$" 'nxml-mode)
             (cons "\\.xsd$" 'nxml-mode)
             (cons "\\.xqy$" 'xquery-mode)
             (cons "\\.html$" 'nxml-mode)
             (cons "\\.htm$" 'nxml-mode)
             (cons "\\.xsl$" 'nxml-mode)
             )
       auto-mode-alist)
      )

(setq magic-mode-alist '(("<\\?xml " . nxml-mode)
                         ("%![^V]" . ps-mode)
                         ("# xmcd " . conf-unix-mode)))

;; for viewing lines matching regexps
(autoload 'all "all" nil t)

;; for RFCs
(autoload 'rfc "rfc" nil t)

;; Various modes
(autoload 'tar-mode "tar-mode.elc" "Tar archive mode." t)
(autoload 'ruby-mode "ruby-mode.elc" "Ruby mode" t)
(autoload 'xquery-mode "xquery-mode.elc" "XQuery mode" t)
(autoload 'python-mode "python-mode" "Mode for editing Python programs" t)
(autoload 'n3-mode "n3-mode" "Mode for editing N3" t)

#+end_src
** Authinfo
 #+begin_src emacs-lisp
(require 'auth-source)
(if (file-exists-p "~/.authinfo.gpg")
    (setq auth-sources '((:source "~/.authinfo.gpg" :host t :protocol t)))
    (setq auth-sources '((:source "~/.authinfo" :host t :protocol t))))
#+end_src
** Custom File
   #+begin_src emacs-lisp
   (setq custom-file "~/.emacs.d/custom-file.el")
   (if (file-exists-p custom-file)
   (load-file custom-file))

   (with-eval-after-load "bind-key"
   (bind-key "<f7>"
	 (lambda ()
	 (interactive
	 (find-file custom-file)))))
 #+end_src
** Custom Faces
   #+begin_src emacs-lisp

   (let* ((variable-tuple
    (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
	  ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
	  ((x-list-fonts "Verdana")         '(:font "Verdana"))
	  ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
	  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

   (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

   ;; Face pitch
   (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Sans Pro" :height 180 :weight light))))
   '(fixed-pitch ((t ( :family "Inconsolata" :slant normal :weight normal :height 1.0 :width normal)))))

   (add-hook 'org-mode-hook 'variable-pitch-mode)

   ;; Faces for elements
   (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

   #+end_src
** Databases
*** MySQL
 #+begin_src emacs-lisp
(add-to-list 'exec-path "/usr/local/opt/mysql-client/bin/mysql")

(setq sql-mysql-program "/usr/local/opt/mysql-client/bin/mysql")

(setq sql-user "djruesch")

(setq sql-password "password")

(setq sql-server "localhost")

;(setq sql-mysql-options "optional command line options")
 #+end_src
*** PostgreSQL
#+begin_src emacs-lisp
(add-to-list 'exec-path "/usr/local/bin/psql")

(setq sql-postgres-program "/usr/local/bin/psql")

(setq postgres-user "djruesch")

;(setq postgres-password "password")

(setq postgres-server "localhost")

;(setq sql-postgres-options "optional command line options")

#+end_src
** Remove Key-Bindings
#+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-c")) ;;killing Emacs 
(global-set-key (kbd "C-x C-c") 'delete-frame) ;;kill Frame 
(global-unset-key (kbd "C-x C-z")) ;;Minimizing a Window
#+end_src
** Package Initialization
  #+begin_src emacs-lisp
 (setq package-enable-at-startup nil)
 #+end_src
** Garbage Collection
#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
#+end_src
** File Check
#+begin_src emacs-lisp
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)
(setq site-run-file nil)
#+end_src

** Define Constants 
#+begin_src emacs-lisp
(defconst *sys/gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst *sys/root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")

(defconst *rg*
  (executable-find "rg")
  "Do we have ripgrep?")

(defconst *python*
  (executable-find "python")
  "Do we have python?")

(defconst *python3*
  (executable-find "python3")
  "Do we have python3?")

(defconst *mvn*
  (executable-find "mvn")
  "Do we have Maven?")

(defconst *gcc*
  (executable-find "gcc")
  "Do we have gcc?")

(defconst *git*
  (executable-find "git")
  "Do we have git?")

(defconst *pdflatex*
  (executable-find "pdflatex")
  "Do we have pdflatex?")
   #+end_src

** Custom File
   #+begin_src emacs-lisp
   (setq custom-file "~/.emacs.d/custom-file.el")
   (if (file-exists-p custom-file)
   (load-file custom-file))

   (with-eval-after-load "bind-key"
   (bind-key "<f7>"
	 (lambda ()
	 (interactive
	 (find-file custom-file)))))
 #+end_src
** Custom Faces
   #+begin_src emacs-lisp

   (let* ((variable-tuple
    (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
	  ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
	  ((x-list-fonts "Verdana")         '(:font "Verdana"))
	  ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
	  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

   (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

   ;; Face pitch
   (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Sans Pro" :height 180 :weight light))))
   '(fixed-pitch ((t ( :family "Inconsolata" :slant normal :weight normal :height 1.0 :width normal)))))

   (add-hook 'org-mode-hook 'variable-pitch-mode)

   ;; Faces for elements
   (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

   #+end_src
** Disable Confirms
#+begin_src emacs-lisp
; Allow some things that emacs would otherwise confirm.
(put 'eval-expression  'disabled nil)
(put 'downcase-region  'disabled nil)
(put 'upcase-region    'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column  'disabled nil)
#+end_src
** Startup Screen
 #+begin_src emacs-lisp
 (setq inhibit-startup-message t)
 #+end_src
** Window Layout
 #+begin_src emacs-lisp

(defun my-startup-layout ()
 (interactive)
 (delete-other-windows)
 ;(split-window-horizontally) ;; -> |
 ;(next-multiframe-window)
 (view-buffer "*dashboard*")
 ;(split-window-vertically) ;;  -> --
 ;(next-multiframe-window)
 ;(shell)
 ;(next-multiframe-window)
 ;(dired "~")
)

 (add-hook 'emacs-startup-hook

     ;; Windows location
     (when (window-system)
     (set-frame-height (selected-frame) 91)
     (set-frame-width (selected-frame) 151)
     (set-frame-position (selected-frame) 1921 0))

     (my-startup-layout )
 )


 #+end_src
** Spelling
 #+begin_src emacs-lisp
 (require 'ispell)

 (add-to-list 'exec-path "/usr/local/bin/hunspell")
 (setq ispell-program-name "/usr/local/bin/hunspell")
 
 (setq ispell-local-dictionary "en_US")

 (add-to-list
  'ispell-local-dictionary-alist
  '(("en_US" "[[:alpha:]]" "[^[:alpha]]" "[0-9']" t
     ("-d" "en_US") nil utf-8)))

 (when (string-equal system-type "darwin") ; There is no problem on Linux
   ;; Dictionary file name
   (setenv "DICTIONARY" "en_US"))

 (global-set-key (kbd "<C-c w>") 'ispell-word)
 (global-set-key (kbd "<C-n f>") 'helm-flyspell-correct)
 ;(global-set-key (kbd "<C-f4>") 'flyspell-correct-word-generic)
 #+end_src
** Backups
#+begin_src emacs-lisp
;(setq backup-by-copying t
;create-lockfiles nil
;backup-directory-alist '((".*" . "~/.saves"))
;; auto-save-file-name-transforms `((".*" "~/.saves" t))
;delete-old-versions t
;kept-new-versions 6
;kept-old-versions 2
;version-control t)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

(defun dj/force-backup-of-buffer ()
  "Lie to Emacs, telling it the current buffer has yet to be backed up."
  (setq buffer-backed-up nil))
(add-hook 'before-save-hook  'dj/force-backup-of-buffer)

#+end_src
** Imortal Buffers
#+begin_src emacs-lisp
;; Make some buffers immortal
(defun dj-immortal-buffers ()
  (if (or (eq (current-buffer) (get-buffer "*scratch*"))
          (eq (current-buffer) (get-buffer "*Messages*")))
      (progn (bury-buffer)
             nil)
    t))

(add-hook 'kill-buffer-query-functions 'dj-immortal-buffers)
#+end_src
** File Register Shortcuts
 #+begin_src emacs-lisp
 (set-register ?a (cons 'file "~/.authinfo.gpg"))
 (set-register ?s (cons 'file "~/.emacs.d/settings.org"))
 (set-register ?o (cons 'file "~/Dropbox/vivo/organizer.org"))
 (set-register ?b (cons 'file "~/Dropbox/vivo/clients/codigopd/blog.org"))
 (set-register ?f (cons 'file "~/Dropbox/vivo/elfeed.org"))
 (set-register ?c (cons 'file "~/Dropbox/vivo/contacts.org"))
 (set-register ?j (cons 'file "~/Dropbox/vivo/journals/djruesch.org"))
 (set-register ?n (cons 'file "~/.netrc"))

 #+end_src
** Unique Property ID
#+begin_src emacs-lisp
(defun dj/org-add-ids-to-headlines-in-file ()
  "Add ID properties to all headlines in the current file which
do not already have one."
  (interactive)
  (org-map-entries 'org-id-get-create)
 )


;(add-hook 'org-mode-hook
;	  (lambda ()
;	    (add-hook 'before-save-hook 'dj/org-add-ids-to-headlines-in-file nil 'local)))
#+end_src
** Completion Ignore
 #+begin_src emacs-lisp
(setq completion-ignored-extensions
      (append completion-ignored-extensions '(".rtf")))
#+end_src
** Menu Bar
  #+begin_src emacs-lisp
  (menu-bar-mode -1)
  #+end_src
** Tool Bar
  #+begin_src emacs-lisp
  (tool-bar-mode -1)
  #+end_src
** Scroll Bar
  #+begin_src emacs-lisp
  (scroll-bar-mode -1)
  #+end_src
** Cursor
*** Blinking
 #+begin_src emacs-lisp
 (blink-cursor-mode -1)
 #+end_src
*** Line Highlight
  #+begin_src emacs-lisp
 ;;(global-hl-line-mode 1)
 ;;(set-face-background 'hl-line "#3e4446")
 ;;(set-face-foreground 'highlight nil)
  #+end_src
** Visable Bell
 #+begin_src emacs-lisp
 (setq ring-bell-function
 (lambda ()
 (let ((orig-fg (face-foreground 'mode-line)))
 (set-face-foreground 'mode-line "#F2804F")
 (run-with-idle-timer 0.1 nil
 (lambda (fg) (set-face-foreground 'mode-line fg))
 orig-fg))))
 #+end_src
** Follow Sym-links
 #+begin_src emacs-lisp
 (setq vc-follow-symlinks t)
 #+end_src
** UTF-8
 #+begin_src emacs-lisp
 (prefer-coding-system       'utf-8)
 (set-default-coding-systems 'utf-8)
 (set-terminal-coding-system 'utf-8)
 (set-keyboard-coding-system 'utf-8)
 (set-language-environment 'utf-8)

 (setq org-export-coding-system 'utf-8)
 (set-charset-priority 'unicode)

 (setq buffer-file-coding-system 'utf-8
       x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
 ;; MS Windows clipboard is UTF-16LE
 (when (eq system-type 'windows-nt)
   (set-clipboard-coding-system 'utf-16le-dos))
 #+end_src
** Web Browser
 #+begin_src emacs-lisp
 (setq browse-url-browser-function 'browse-url-generic)
 (setq browse-url-generic-program "/Applications/qutebrowser.app/Contents/MacOS/qutebrowser")
 #+end_src
** Warning Messages
 #+begin_src emacs-lisp
 ;; Change "yes or no" to "y or n"
 (fset 'yes-or-no-p 'y-or-n-p)

 ;; Don't ask for confirmation for "dangerous" commands
 (put 'erase-buffer 'disabled nil)
 (put 'narrow-to-page 'disabled nil)
 (put 'upcase-region 'disabled nil)
 (put 'narrow-to-region 'disabled nil)
 (put 'downcase-region 'disabled nil)
 (put 'scroll-left 'disabled nil)
 (put 'scroll-right 'disabled nil)
 (put 'set-goal-column 'disabled nil)

 ;; large file warning
 (setq large-file-warning-threshold (* 15 1024 1024))
 #+end_src
** Emacs Server
 #+begin_src emacs-lisp
(server-start)
;(require 'server)

;(setq server-port    52698)
;(setq server-use-tcp t)

(defun server-start-and-copy ()
  (server-start)
  (copy-file "~/.emacs.d/server/server" "/Volumes/DJRuesch/.emacs.d/server/server" t))

;(add-hook 'emacs-startup-hook 'server-start-and-copy)

; (when (and (or (eq system-type 'windows-nt) (eq system-type 'darwin))
 ;	    (not (and (boundp 'server-clients) server-clients))
 ;	    (not (daemonp)))
  ; (server-start))

#+end_src* My Scripts
** Org-Agenda_with_Tip
#+begin_src emacs-lisp
(cd (getenv "HOME"))

(defun dj/org-agenda-with-tip (arg)
  "Show agenda for ARG days."
  (org-agenda-list arg)
  (let ((inhibit-read-only t)
	(pos (point)))
    (goto-char (point-max))
    (goto-char pos)))
#+end_src
** Kill Current Buffer
 #+begin_src emacs-lisp
 (defun dj/kill-this-buffer ()
   "Kill the current buffer"
   (interactive)
   (kill-buffer (current-buffer)))

 (bind-keys
  ("C-x C-k" . dj/kill-this-buffer))
 #+end_src
** Dynamic Font Size
#+begin_src emacs-lisp
(defun dj/change-frame-font-size (fn)
  "Change the frame font size according to function FN."
  (let* ((font-name (frame-parameter nil 'font))
     (decomposed-font-name (x-decompose-font-name font-name))
     (font-size (string-to-number (aref decomposed-font-name 5))))
    (aset decomposed-font-name 5 (int-to-string (funcall fn font-size)))
    (set-frame-font (x-compose-font-name decomposed-font-name))))

(defun dj/frame-text-scale-increase ()
  "Increase the frame font size by 1."
  (interactive)
  (dj/change-frame-font-size '1+))

(defun dj/frame-text-scale-decrease ()
  "Decrease the frame font size by 1."
  (interactive)
  (dj/change-frame-font-size '1-))

(bind-keys
 ("C-+" . text-scale-increase)
 ("C--" . text-scale-decrease)
 ("s--" . dj/frame-text-scale-decrease)
 ("s-+" . dj/frame-text-scale-increase)
 ("s-=" . dj/frame-text-scale-increase))
#+end_src
** Transparency
 #+begin_src emacs-lisp
 (use-package ring
   :commands (dj/transparency-apply dj/transparency-next dj/transparency-previous
		     dj/transparency-cycle dj/transparency-add)
   :config
   (setq dj/transparency-ring
     (ring-convert-sequence-to-ring (list '(100 100) '(100 50) '(100 10) '(95 50) '(90 50) '(85 50)))
     dj/transparency
     (ring-ref dj/transparency-ring 0))

   (defun dj/transparency-apply (trans)
     "Apply the TRANS alpha value to the frame."
     (set-frame-parameter (selected-frame) 'alpha (setq dj/transparency trans)))

   (defun dj/transparency-next ()
     "Apply the next transparency value in the ring `dj/transparency-ring`."
     (interactive)
     (dj/transparency-apply (ring-next dj/transparency-ring dj/transparency)))

   (defun dj/transparency-previous ()
     "Apply the previous transparency value in the ring `dj/transparency-ring`."
     (interactive)
     (dj/transparency-apply (ring-previous dj/transparency-ring dj/transparency)))

   (defun dj/transparency-cycle ()
     "Cycle to the next transparency setting."
     (interactive)
     (dj/transparency-next))

   (defun dj/transparency-add (active inactive)
     "Add ACTIVE and INACTIVE transparency values to the ring."
     (interactive "nActive Transparency:\nnInactive Transparency:")
     (ring-insert+extend dj/transparency-ring (list active inactive) t)
     (dj/transparency-apply (list active inactive))))
 #+end_src
** Duplicate Line
*** Key Bindings
:PROPERTIES:
:ID:       053AD3F9-E892-4B14-B770-7B0122F32515
:END:
#+begin_src emacs-lisp
(global-set-key (kbd "C-d") 'dj/duplicate-line)      ;; Duplicate Line
#+end_src
*** Code
:PROPERTIES:
:ID:       04641334-7824-4ACE-BC5F-8502AFCF9C23
:END:
   #+begin_src emacs-lisp
   (defun dj/duplicate-line()
     (interactive)
     (move-beginning-of-line 1)
     (kill-line)
     (yank)
     (open-line 1)
     (next-line 1)
     (yank)
   )

   #+end_src
** Reload Config File
*** Key Bindings
:PROPERTIES:
:ID:       C2139E25-3D49-4066-A416-AAA80F4A8B9C
:END:
#+begin_src emacs-lisp
(global-set-key (kbd "C-c r") 'dj/reload-init-file)
#+end_src
*** Code
:PROPERTIES:
:ID:       301C3B60-AE60-4AAB-9BBE-9E19E8821F9A
:END:
 #+begin_src emacs-lisp
 (defun dj/reload-init-file ()
   (interactive)
   (load-file "~/.emacs.d/init.el"))
#+end_src
** Move Lines
#+begin_src emacs-lisp


(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

;(define-key input-decode-map "\e\eOA" [(meta up)])
;(define-key input-decode-map "\e\eOB" [(meta down)])

(global-set-key [(meta up)]  'move-line-up)
(global-set-key [(meta down)]  'move-line-down)
#+end_src
* Configurations
** Autoloads
#+begin_src emacs-lisp
(setq auto-mode-alist
      (append
       (list (cons "\\.org$" 'org-mode)
             (cons "\\.txt$" 'text-mode)
             (cons "\\.tex$" 'latex-mode)
             (cons "\\.sli$" 'latex-mode)
             (cons "\\.bib$" 'bibtex-mode)
             (cons "\\.epub$" 'nov-mode)
             
             (cons "\\.dss?s?l$" 'dsssl-mode)
             (cons "\\.css$" 'css-mode)

             (cons "\\.pl$" 'perl-mode)
             (cons "\\.cls$" 'perl-mode)
             (cons "\\.sup$" 'perl-mode)

             (cons "\\.py$" 'python-mode)
             (cons "\\.pdf$" 'pdf-view-mode)

             (cons "\\.rb$" 'ruby-mode)

             (cons "\\.3l$" 'nroff-mode)

             (cons "\\.ttl$" 'ttl-mode)
             (cons "\\.n3$" 'ttl-mode)

             (cons "\\.ts$" 'ng2-ts-mode)

             (cons "\\.rdf$" 'nxml-mode)
             (cons "\\.rnc$" 'rnc-mode)
             (cons "\\.rng$" 'nxml-mode)
             (cons "\\.xpd$" 'nxml-mode)
             (cons "\\.xml$" 'nxml-mode)
             (cons "\\.xpl$" 'nxml-mode)
             (cons "\\.xsd$" 'nxml-mode)
             (cons "\\.xqy$" 'xquery-mode)
             (cons "\\.html$" 'nxml-mode)
             (cons "\\.htm$" 'nxml-mode)
             (cons "\\.xsl$" 'nxml-mode)
             )
       auto-mode-alist)
      )

(setq magic-mode-alist '(("<\\?xml " . nxml-mode)
                         ("%![^V]" . ps-mode)
                         ("# xmcd " . conf-unix-mode)))

;; for viewing lines matching regexps
(autoload 'all "all" nil t)

;; for RFCs
(autoload 'rfc "rfc" nil t)

;; Various modes
(autoload 'tar-mode "tar-mode.elc" "Tar archive mode." t)
(autoload 'ruby-mode "ruby-mode.elc" "Ruby mode" t)
(autoload 'xquery-mode "xquery-mode.elc" "XQuery mode" t)
(autoload 'python-mode "python-mode" "Mode for editing Python programs" t)
(autoload 'n3-mode "n3-mode" "Mode for editing N3" t)

#+end_src
** Authinfo
 #+begin_src emacs-lisp
(require 'auth-source)
(if (file-exists-p "~/.authinfo.gpg")
    (setq auth-sources '((:source "~/.authinfo.gpg" :host t :protocol t)))
    (setq auth-sources '((:source "~/.authinfo" :host t :protocol t))))
#+end_src
** Custom File
   #+begin_src emacs-lisp
   (setq custom-file "~/.emacs.d/custom-file.el")
   (if (file-exists-p custom-file)
   (load-file custom-file))

   (with-eval-after-load "bind-key"
   (bind-key "<f7>"
	 (lambda ()
	 (interactive
	 (find-file custom-file)))))
 #+end_src
** Custom Faces
   #+begin_src emacs-lisp

   (let* ((variable-tuple
    (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
	  ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
	  ((x-list-fonts "Verdana")         '(:font "Verdana"))
	  ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
	  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

   (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

   ;; Face pitch
   (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Sans Pro" :height 180 :weight light))))
   '(fixed-pitch ((t ( :family "Inconsolata" :slant normal :weight normal :height 1.0 :width normal)))))

   (add-hook 'org-mode-hook 'variable-pitch-mode)

   ;; Faces for elements
   (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

   #+end_src
** Databases
*** MySQL
 #+begin_src emacs-lisp
(add-to-list 'exec-path "/usr/local/opt/mysql-client/bin/mysql")

(setq sql-mysql-program "/usr/local/opt/mysql-client/bin/mysql")

(setq sql-user "djruesch")

(setq sql-password "password")

(setq sql-server "localhost")

;(setq sql-mysql-options "optional command line options")
 #+end_src
*** PostgreSQL
#+begin_src emacs-lisp
(add-to-list 'exec-path "/usr/local/bin/psql")

(setq sql-postgres-program "/usr/local/bin/psql")

(setq postgres-user "djruesch")

;(setq postgres-password "password")

(setq postgres-server "localhost")

;(setq sql-postgres-options "optional command line options")

#+end_src
** Remove Key-Bindings
#+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-c")) ;;killing Emacs 
(global-set-key (kbd "C-x C-c") 'delete-frame) ;;kill Frame 
(global-unset-key (kbd "C-x C-z")) ;;Minimizing a Window
#+end_src
** Package Initialization
  #+begin_src emacs-lisp
 (setq package-enable-at-startup nil)
 #+end_src
** Garbage Collection
#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
#+end_src
** File Check
#+begin_src emacs-lisp
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)
(setq site-run-file nil)
#+end_src

** Define Constants 
#+begin_src emacs-lisp
(defconst *sys/gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst *sys/root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")

(defconst *rg*
  (executable-find "rg")
  "Do we have ripgrep?")

(defconst *python*
  (executable-find "python")
  "Do we have python?")

(defconst *python3*
  (executable-find "python3")
  "Do we have python3?")

(defconst *mvn*
  (executable-find "mvn")
  "Do we have Maven?")

(defconst *gcc*
  (executable-find "gcc")
  "Do we have gcc?")

(defconst *git*
  (executable-find "git")
  "Do we have git?")

(defconst *pdflatex*
  (executable-find "pdflatex")
  "Do we have pdflatex?")
   #+end_src

** Custom File
   #+begin_src emacs-lisp
   (setq custom-file "~/.emacs.d/custom-file.el")
   (if (file-exists-p custom-file)
   (load-file custom-file))

   (with-eval-after-load "bind-key"
   (bind-key "<f7>"
	 (lambda ()
	 (interactive
	 (find-file custom-file)))))
 #+end_src
** Custom Faces
   #+begin_src emacs-lisp

   (let* ((variable-tuple
    (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
	  ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
	  ((x-list-fonts "Verdana")         '(:font "Verdana"))
	  ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
	  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

   (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

   ;; Face pitch
   (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Sans Pro" :height 180 :weight light))))
   '(fixed-pitch ((t ( :family "Inconsolata" :slant normal :weight normal :height 1.0 :width normal)))))

   (add-hook 'org-mode-hook 'variable-pitch-mode)

   ;; Faces for elements
   (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

   #+end_src
** Disable Confirms
#+begin_src emacs-lisp
; Allow some things that emacs would otherwise confirm.
(put 'eval-expression  'disabled nil)
(put 'downcase-region  'disabled nil)
(put 'upcase-region    'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column  'disabled nil)
#+end_src
** Startup Screen
 #+begin_src emacs-lisp
 (setq inhibit-startup-message t)
 #+end_src
** Window Layout
 #+begin_src emacs-lisp

(defun my-startup-layout ()
 (interactive)
 (delete-other-windows)
 ;(split-window-horizontally) ;; -> |
 ;(next-multiframe-window)
 (view-buffer "*dashboard*")
 ;(split-window-vertically) ;;  -> --
 ;(next-multiframe-window)
 ;(shell)
 ;(next-multiframe-window)
 ;(dired "~")
)

 (add-hook 'emacs-startup-hook

     ;; Windows location
     (when (window-system)
     (set-frame-height (selected-frame) 91)
     (set-frame-width (selected-frame) 151)
     (set-frame-position (selected-frame) 1921 0))

     (my-startup-layout )
 )


 #+end_src
** Spelling
 #+begin_src emacs-lisp
 (require 'ispell)

 (add-to-list 'exec-path "/usr/local/bin/hunspell")
 (setq ispell-program-name "/usr/local/bin/hunspell")
 
 (setq ispell-local-dictionary "en_US")

 (add-to-list
  'ispell-local-dictionary-alist
  '(("en_US" "[[:alpha:]]" "[^[:alpha]]" "[0-9']" t
     ("-d" "en_US") nil utf-8)))

 (when (string-equal system-type "darwin") ; There is no problem on Linux
   ;; Dictionary file name
   (setenv "DICTIONARY" "en_US"))

 (global-set-key (kbd "<C-c w>") 'ispell-word)
 (global-set-key (kbd "<C-n f>") 'helm-flyspell-correct)
 ;(global-set-key (kbd "<C-f4>") 'flyspell-correct-word-generic)
 #+end_src
** Backups
#+begin_src emacs-lisp
;(setq backup-by-copying t
;create-lockfiles nil
;backup-directory-alist '((".*" . "~/.saves"))
;; auto-save-file-name-transforms `((".*" "~/.saves" t))
;delete-old-versions t
;kept-new-versions 6
;kept-old-versions 2
;version-control t)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

(defun dj/force-backup-of-buffer ()
  "Lie to Emacs, telling it the current buffer has yet to be backed up."
  (setq buffer-backed-up nil))
(add-hook 'before-save-hook  'dj/force-backup-of-buffer)

#+end_src
** Imortal Buffers
#+begin_src emacs-lisp
;; Make some buffers immortal
(defun dj-immortal-buffers ()
  (if (or (eq (current-buffer) (get-buffer "*scratch*"))
          (eq (current-buffer) (get-buffer "*Messages*")))
      (progn (bury-buffer)
             nil)
    t))

(add-hook 'kill-buffer-query-functions 'dj-immortal-buffers)
#+end_src
** File Register Shortcuts
 #+begin_src emacs-lisp
 (set-register ?a (cons 'file "~/.authinfo.gpg"))
 (set-register ?s (cons 'file "~/.emacs.d/settings.org"))
 (set-register ?o (cons 'file "~/Dropbox/vivo/organizer.org"))
 (set-register ?b (cons 'file "~/Dropbox/vivo/clients/codigopd/blog.org"))
 (set-register ?f (cons 'file "~/Dropbox/vivo/elfeed.org"))
 (set-register ?c (cons 'file "~/Dropbox/vivo/contacts.org"))
 (set-register ?j (cons 'file "~/Dropbox/vivo/journals/djruesch.org"))
 (set-register ?n (cons 'file "~/.netrc"))

 #+end_src
** Unique Property ID
#+begin_src emacs-lisp
(defun dj/org-add-ids-to-headlines-in-file ()
  "Add ID properties to all headlines in the current file which
do not already have one."
  (interactive)
  (org-map-entries 'org-id-get-create)
 )


;(add-hook 'org-mode-hook
;	  (lambda ()
;	    (add-hook 'before-save-hook 'dj/org-add-ids-to-headlines-in-file nil 'local)))
#+end_src
** Completion Ignore
 #+begin_src emacs-lisp
(setq completion-ignored-extensions
      (append completion-ignored-extensions '(".rtf")))
#+end_src
** Menu Bar
  #+begin_src emacs-lisp
  (menu-bar-mode -1)
  #+end_src
** Tool Bar
  #+begin_src emacs-lisp
  (tool-bar-mode -1)
  #+end_src
** Scroll Bar
  #+begin_src emacs-lisp
  (scroll-bar-mode -1)
  #+end_src
** Cursor
*** Blinking
 #+begin_src emacs-lisp
 (blink-cursor-mode -1)
 #+end_src
*** Line Highlight
  #+begin_src emacs-lisp
 ;;(global-hl-line-mode 1)
 ;;(set-face-background 'hl-line "#3e4446")
 ;;(set-face-foreground 'highlight nil)
  #+end_src
** Visable Bell
 #+begin_src emacs-lisp
 (setq ring-bell-function
 (lambda ()
 (let ((orig-fg (face-foreground 'mode-line)))
 (set-face-foreground 'mode-line "#F2804F")
 (run-with-idle-timer 0.1 nil
 (lambda (fg) (set-face-foreground 'mode-line fg))
 orig-fg))))
 #+end_src
** Follow Sym-links
 #+begin_src emacs-lisp
 (setq vc-follow-symlinks t)
 #+end_src
** UTF-8
 #+begin_src emacs-lisp
 (prefer-coding-system       'utf-8)
 (set-default-coding-systems 'utf-8)
 (set-terminal-coding-system 'utf-8)
 (set-keyboard-coding-system 'utf-8)
 (set-language-environment 'utf-8)

 (setq org-export-coding-system 'utf-8)
 (set-charset-priority 'unicode)

 (setq buffer-file-coding-system 'utf-8
       x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
 ;; MS Windows clipboard is UTF-16LE
 (when (eq system-type 'windows-nt)
   (set-clipboard-coding-system 'utf-16le-dos))
 #+end_src
** Web Browser
 #+begin_src emacs-lisp
 (setq browse-url-browser-function 'browse-url-generic)
 (setq browse-url-generic-program "/Applications/qutebrowser.app/Contents/MacOS/qutebrowser")
 #+end_src
** Warning Messages
 #+begin_src emacs-lisp
 ;; Change "yes or no" to "y or n"
 (fset 'yes-or-no-p 'y-or-n-p)

 ;; Don't ask for confirmation for "dangerous" commands
 (put 'erase-buffer 'disabled nil)
 (put 'narrow-to-page 'disabled nil)
 (put 'upcase-region 'disabled nil)
 (put 'narrow-to-region 'disabled nil)
 (put 'downcase-region 'disabled nil)
 (put 'scroll-left 'disabled nil)
 (put 'scroll-right 'disabled nil)
 (put 'set-goal-column 'disabled nil)

 ;; large file warning
 (setq large-file-warning-threshold (* 15 1024 1024))
 #+end_src
** Emacs Server
 #+begin_src emacs-lisp
(server-start)
;(require 'server)

;(setq server-port    52698)
;(setq server-use-tcp t)

(defun server-start-and-copy ()
  (server-start)
  (copy-file "~/.emacs.d/server/server" "/Volumes/DJRuesch/.emacs.d/server/server" t))

;(add-hook 'emacs-startup-hook 'server-start-and-copy)

; (when (and (or (eq system-type 'windows-nt) (eq system-type 'darwin))
 ;	    (not (and (boundp 'server-clients) server-clients))
 ;	    (not (daemonp)))
  ; (server-start))

#+end_src* My Scripts
** Org-Agenda_with_Tip
#+begin_src emacs-lisp
(cd (getenv "HOME"))

(defun dj/org-agenda-with-tip (arg)
  "Show agenda for ARG days."
  (org-agenda-list arg)
  (let ((inhibit-read-only t)
	(pos (point)))
    (goto-char (point-max))
    (goto-char pos)))
#+end_src
** Kill Current Buffer
 #+begin_src emacs-lisp
 (defun dj/kill-this-buffer ()
   "Kill the current buffer"
   (interactive)
   (kill-buffer (current-buffer)))

 (bind-keys
  ("C-x C-k" . dj/kill-this-buffer))
 #+end_src
** Dynamic Font Size
#+begin_src emacs-lisp
(defun dj/change-frame-font-size (fn)
  "Change the frame font size according to function FN."
  (let* ((font-name (frame-parameter nil 'font))
     (decomposed-font-name (x-decompose-font-name font-name))
     (font-size (string-to-number (aref decomposed-font-name 5))))
    (aset decomposed-font-name 5 (int-to-string (funcall fn font-size)))
    (set-frame-font (x-compose-font-name decomposed-font-name))))

(defun dj/frame-text-scale-increase ()
  "Increase the frame font size by 1."
  (interactive)
  (dj/change-frame-font-size '1+))

(defun dj/frame-text-scale-decrease ()
  "Decrease the frame font size by 1."
  (interactive)
  (dj/change-frame-font-size '1-))

(bind-keys
 ("C-+" . text-scale-increase)
 ("C--" . text-scale-decrease)
 ("s--" . dj/frame-text-scale-decrease)
 ("s-+" . dj/frame-text-scale-increase)
 ("s-=" . dj/frame-text-scale-increase))
#+end_src
** Transparency
 #+begin_src emacs-lisp
 (use-package ring
   :commands (dj/transparency-apply dj/transparency-next dj/transparency-previous
		     dj/transparency-cycle dj/transparency-add)
   :config
   (setq dj/transparency-ring
     (ring-convert-sequence-to-ring (list '(100 100) '(100 50) '(100 10) '(95 50) '(90 50) '(85 50)))
     dj/transparency
     (ring-ref dj/transparency-ring 0))

   (defun dj/transparency-apply (trans)
     "Apply the TRANS alpha value to the frame."
     (set-frame-parameter (selected-frame) 'alpha (setq dj/transparency trans)))

   (defun dj/transparency-next ()
     "Apply the next transparency value in the ring `dj/transparency-ring`."
     (interactive)
     (dj/transparency-apply (ring-next dj/transparency-ring dj/transparency)))

   (defun dj/transparency-previous ()
     "Apply the previous transparency value in the ring `dj/transparency-ring`."
     (interactive)
     (dj/transparency-apply (ring-previous dj/transparency-ring dj/transparency)))

   (defun dj/transparency-cycle ()
     "Cycle to the next transparency setting."
     (interactive)
     (dj/transparency-next))

   (defun dj/transparency-add (active inactive)
     "Add ACTIVE and INACTIVE transparency values to the ring."
     (interactive "nActive Transparency:\nnInactive Transparency:")
     (ring-insert+extend dj/transparency-ring (list active inactive) t)
     (dj/transparency-apply (list active inactive))))
 #+end_src
** Duplicate Line
*** Key Bindings
:PROPERTIES:
:ID:       053AD3F9-E892-4B14-B770-7B0122F32515
:END:
#+begin_src emacs-lisp
(global-set-key (kbd "C-d") 'dj/duplicate-line)      ;; Duplicate Line
#+end_src
*** Code
:PROPERTIES:
:ID:       04641334-7824-4ACE-BC5F-8502AFCF9C23
:END:
   #+begin_src emacs-lisp
   (defun dj/duplicate-line()
     (interactive)
     (move-beginning-of-line 1)
     (kill-line)
     (yank)
     (open-line 1)
     (next-line 1)
     (yank)
   )

   #+end_src
** Reload Config File
*** Key Bindings
:PROPERTIES:
:ID:       C2139E25-3D49-4066-A416-AAA80F4A8B9C
:END:
#+begin_src emacs-lisp
(global-set-key (kbd "C-c r") 'dj/reload-init-file)
#+end_src
*** Code
:PROPERTIES:
:ID:       301C3B60-AE60-4AAB-9BBE-9E19E8821F9A
:END:
 #+begin_src emacs-lisp
 (defun dj/reload-init-file ()
   (interactive)
   (load-file "~/.emacs.d/init.el"))
#+end_src
** Move Lines
#+begin_src emacs-lisp


(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

;(define-key input-decode-map "\e\eOA" [(meta up)])
;(define-key input-decode-map "\e\eOB" [(meta down)])

(global-set-key [(meta up)]  'move-line-up)
(global-set-key [(meta down)]  'move-line-down)
#+end_src
* Configurations
** Autoloads
#+begin_src emacs-lisp
(setq auto-mode-alist
      (append
       (list (cons "\\.org$" 'org-mode)
             (cons "\\.txt$" 'text-mode)
             (cons "\\.tex$" 'latex-mode)
             (cons "\\.sli$" 'latex-mode)
             (cons "\\.bib$" 'bibtex-mode)
             (cons "\\.epub$" 'nov-mode)
             
             (cons "\\.dss?s?l$" 'dsssl-mode)
             (cons "\\.css$" 'css-mode)

             (cons "\\.pl$" 'perl-mode)
             (cons "\\.cls$" 'perl-mode)
             (cons "\\.sup$" 'perl-mode)

             (cons "\\.py$" 'python-mode)
             (cons "\\.pdf$" 'pdf-view-mode)

             (cons "\\.rb$" 'ruby-mode)

             (cons "\\.3l$" 'nroff-mode)

             (cons "\\.ttl$" 'ttl-mode)
             (cons "\\.n3$" 'ttl-mode)

             (cons "\\.ts$" 'ng2-ts-mode)

             (cons "\\.rdf$" 'nxml-mode)
             (cons "\\.rnc$" 'rnc-mode)
             (cons "\\.rng$" 'nxml-mode)
             (cons "\\.xpd$" 'nxml-mode)
             (cons "\\.xml$" 'nxml-mode)
             (cons "\\.xpl$" 'nxml-mode)
             (cons "\\.xsd$" 'nxml-mode)
             (cons "\\.xqy$" 'xquery-mode)
             (cons "\\.html$" 'nxml-mode)
             (cons "\\.htm$" 'nxml-mode)
             (cons "\\.xsl$" 'nxml-mode)
             )
       auto-mode-alist)
      )

(setq magic-mode-alist '(("<\\?xml " . nxml-mode)
                         ("%![^V]" . ps-mode)
                         ("# xmcd " . conf-unix-mode)))

;; for viewing lines matching regexps
(autoload 'all "all" nil t)

;; for RFCs
(autoload 'rfc "rfc" nil t)

;; Various modes
(autoload 'tar-mode "tar-mode.elc" "Tar archive mode." t)
(autoload 'ruby-mode "ruby-mode.elc" "Ruby mode" t)
(autoload 'xquery-mode "xquery-mode.elc" "XQuery mode" t)
(autoload 'python-mode "python-mode" "Mode for editing Python programs" t)
(autoload 'n3-mode "n3-mode" "Mode for editing N3" t)

#+end_src
** Authinfo
 #+begin_src emacs-lisp
(require 'auth-source)
(if (file-exists-p "~/.authinfo.gpg")
    (setq auth-sources '((:source "~/.authinfo.gpg" :host t :protocol t)))
    (setq auth-sources '((:source "~/.authinfo" :host t :protocol t))))
#+end_src
** Custom File
   #+begin_src emacs-lisp
   (setq custom-file "~/.emacs.d/custom-file.el")
   (if (file-exists-p custom-file)
   (load-file custom-file))

   (with-eval-after-load "bind-key"
   (bind-key "<f7>"
	 (lambda ()
	 (interactive
	 (find-file custom-file)))))
 #+end_src
** Custom Faces
   #+begin_src emacs-lisp

   (let* ((variable-tuple
    (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
	  ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
	  ((x-list-fonts "Verdana")         '(:font "Verdana"))
	  ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
	  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

   (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

   ;; Face pitch
   (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Sans Pro" :height 180 :weight light))))
   '(fixed-pitch ((t ( :family "Inconsolata" :slant normal :weight normal :height 1.0 :width normal)))))

   (add-hook 'org-mode-hook 'variable-pitch-mode)

   ;; Faces for elements
   (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

   #+end_src
** Databases
*** MySQL
 #+begin_src emacs-lisp
(add-to-list 'exec-path "/usr/local/opt/mysql-client/bin/mysql")

(setq sql-mysql-program "/usr/local/opt/mysql-client/bin/mysql")

(setq sql-user "djruesch")

(setq sql-password "password")

(setq sql-server "localhost")

;(setq sql-mysql-options "optional command line options")
 #+end_src
*** PostgreSQL
#+begin_src emacs-lisp
(add-to-list 'exec-path "/usr/local/bin/psql")

(setq sql-postgres-program "/usr/local/bin/psql")

(setq postgres-user "djruesch")

;(setq postgres-password "password")

(setq postgres-server "localhost")

;(setq sql-postgres-options "optional command line options")

#+end_src
** Remove Key-Bindings
#+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-c")) ;;killing Emacs 
(global-set-key (kbd "C-x C-c") 'delete-frame) ;;kill Frame 
(global-unset-key (kbd "C-x C-z")) ;;Minimizing a Window
#+end_src
** Package Initialization
  #+begin_src emacs-lisp
 (setq package-enable-at-startup nil)
 #+end_src
** Garbage Collection
#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
#+end_src
** File Check
#+begin_src emacs-lisp
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)
(setq site-run-file nil)
#+end_src

** Define Constants 
#+begin_src emacs-lisp
(defconst *sys/gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst *sys/root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")

(defconst *rg*
  (executable-find "rg")
  "Do we have ripgrep?")

(defconst *python*
  (executable-find "python")
  "Do we have python?")

(defconst *python3*
  (executable-find "python3")
  "Do we have python3?")

(defconst *mvn*
  (executable-find "mvn")
  "Do we have Maven?")

(defconst *gcc*
  (executable-find "gcc")
  "Do we have gcc?")

(defconst *git*
  (executable-find "git")
  "Do we have git?")

(defconst *pdflatex*
  (executable-find "pdflatex")
  "Do we have pdflatex?")
   #+end_src

** Custom File
   #+begin_src emacs-lisp
   (setq custom-file "~/.emacs.d/custom-file.el")
   (if (file-exists-p custom-file)
   (load-file custom-file))

   (with-eval-after-load "bind-key"
   (bind-key "<f7>"
	 (lambda ()
	 (interactive
	 (find-file custom-file)))))
 #+end_src
** Custom Faces
   #+begin_src emacs-lisp

   (let* ((variable-tuple
    (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
	  ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
	  ((x-list-fonts "Verdana")         '(:font "Verdana"))
	  ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
	  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

   (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

   ;; Face pitch
   (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Sans Pro" :height 180 :weight light))))
   '(fixed-pitch ((t ( :family "Inconsolata" :slant normal :weight normal :height 1.0 :width normal)))))

   (add-hook 'org-mode-hook 'variable-pitch-mode)

   ;; Faces for elements
   (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

   #+end_src
** Disable Confirms
#+begin_src emacs-lisp
; Allow some things that emacs would otherwise confirm.
(put 'eval-expression  'disabled nil)
(put 'downcase-region  'disabled nil)
(put 'upcase-region    'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column  'disabled nil)
#+end_src
** Startup Screen
 #+begin_src emacs-lisp
 (setq inhibit-startup-message t)
 #+end_src
** Window Layout
 #+begin_src emacs-lisp

(defun my-startup-layout ()
 (interactive)
 (delete-other-windows)
 ;(split-window-horizontally) ;; -> |
 ;(next-multiframe-window)
 (view-buffer "*dashboard*")
 ;(split-window-vertically) ;;  -> --
 ;(next-multiframe-window)
 ;(shell)
 ;(next-multiframe-window)
 ;(dired "~")
)

 (add-hook 'emacs-startup-hook

     ;; Windows location
     (when (window-system)
     (set-frame-height (selected-frame) 91)
     (set-frame-width (selected-frame) 151)
     (set-frame-position (selected-frame) 1921 0))

     (my-startup-layout )
 )


 #+end_src
** Spelling
 #+begin_src emacs-lisp
 (require 'ispell)

 (add-to-list 'exec-path "/usr/local/bin/hunspell")
 (setq ispell-program-name "/usr/local/bin/hunspell")
 
 (setq ispell-local-dictionary "en_US")

 (add-to-list
  'ispell-local-dictionary-alist
  '(("en_US" "[[:alpha:]]" "[^[:alpha]]" "[0-9']" t
     ("-d" "en_US") nil utf-8)))

 (when (string-equal system-type "darwin") ; There is no problem on Linux
   ;; Dictionary file name
   (setenv "DICTIONARY" "en_US"))

 (global-set-key (kbd "<C-c w>") 'ispell-word)
 (global-set-key (kbd "<C-n f>") 'helm-flyspell-correct)
 ;(global-set-key (kbd "<C-f4>") 'flyspell-correct-word-generic)
 #+end_src
** Backups
#+begin_src emacs-lisp
;(setq backup-by-copying t
;create-lockfiles nil
;backup-directory-alist '((".*" . "~/.saves"))
;; auto-save-file-name-transforms `((".*" "~/.saves" t))
;delete-old-versions t
;kept-new-versions 6
;kept-old-versions 2
;version-control t)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

(defun dj/force-backup-of-buffer ()
  "Lie to Emacs, telling it the current buffer has yet to be backed up."
  (setq buffer-backed-up nil))
(add-hook 'before-save-hook  'dj/force-backup-of-buffer)

#+end_src
** Imortal Buffers
#+begin_src emacs-lisp
;; Make some buffers immortal
(defun dj-immortal-buffers ()
  (if (or (eq (current-buffer) (get-buffer "*scratch*"))
          (eq (current-buffer) (get-buffer "*Messages*")))
      (progn (bury-buffer)
             nil)
    t))

(add-hook 'kill-buffer-query-functions 'dj-immortal-buffers)
#+end_src
** File Register Shortcuts
 #+begin_src emacs-lisp
 (set-register ?a (cons 'file "~/.authinfo.gpg"))
 (set-register ?s (cons 'file "~/.emacs.d/settings.org"))
 (set-register ?o (cons 'file "~/Dropbox/vivo/organizer.org"))
 (set-register ?b (cons 'file "~/Dropbox/vivo/clients/codigopd/blog.org"))
 (set-register ?f (cons 'file "~/Dropbox/vivo/elfeed.org"))
 (set-register ?c (cons 'file "~/Dropbox/vivo/contacts.org"))
 (set-register ?j (cons 'file "~/Dropbox/vivo/journals/djruesch.org"))
 (set-register ?n (cons 'file "~/.netrc"))

 #+end_src
** Unique Property ID
#+begin_src emacs-lisp
(defun dj/org-add-ids-to-headlines-in-file ()
  "Add ID properties to all headlines in the current file which
do not already have one."
  (interactive)
  (org-map-entries 'org-id-get-create)
 )


;(add-hook 'org-mode-hook
;	  (lambda ()
;	    (add-hook 'before-save-hook 'dj/org-add-ids-to-headlines-in-file nil 'local)))
#+end_src
** Completion Ignore
 #+begin_src emacs-lisp
(setq completion-ignored-extensions
      (append completion-ignored-extensions '(".rtf")))
#+end_src
** Menu Bar
  #+begin_src emacs-lisp
  (menu-bar-mode -1)
  #+end_src
** Tool Bar
  #+begin_src emacs-lisp
  (tool-bar-mode -1)
  #+end_src
** Scroll Bar
  #+begin_src emacs-lisp
  (scroll-bar-mode -1)
  #+end_src
** Cursor
*** Blinking
 #+begin_src emacs-lisp
 (blink-cursor-mode -1)
 #+end_src
*** Line Highlight
  #+begin_src emacs-lisp
 ;;(global-hl-line-mode 1)
 ;;(set-face-background 'hl-line "#3e4446")
 ;;(set-face-foreground 'highlight nil)
  #+end_src
** Visable Bell
 #+begin_src emacs-lisp
 (setq ring-bell-function
 (lambda ()
 (let ((orig-fg (face-foreground 'mode-line)))
 (set-face-foreground 'mode-line "#F2804F")
 (run-with-idle-timer 0.1 nil
 (lambda (fg) (set-face-foreground 'mode-line fg))
 orig-fg))))
 #+end_src
** Follow Sym-links
 #+begin_src emacs-lisp
 (setq vc-follow-symlinks t)
 #+end_src
** UTF-8
 #+begin_src emacs-lisp
 (prefer-coding-system       'utf-8)
 (set-default-coding-systems 'utf-8)
 (set-terminal-coding-system 'utf-8)
 (set-keyboard-coding-system 'utf-8)
 (set-language-environment 'utf-8)

 (setq org-export-coding-system 'utf-8)
 (set-charset-priority 'unicode)

 (setq buffer-file-coding-system 'utf-8
       x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
 ;; MS Windows clipboard is UTF-16LE
 (when (eq system-type 'windows-nt)
   (set-clipboard-coding-system 'utf-16le-dos))
 #+end_src
** Web Browser
 #+begin_src emacs-lisp
 (setq browse-url-browser-function 'browse-url-generic)
 (setq browse-url-generic-program "/Applications/qutebrowser.app/Contents/MacOS/qutebrowser")
 #+end_src
** Warning Messages
 #+begin_src emacs-lisp
 ;; Change "yes or no" to "y or n"
 (fset 'yes-or-no-p 'y-or-n-p)

 ;; Don't ask for confirmation for "dangerous" commands
 (put 'erase-buffer 'disabled nil)
 (put 'narrow-to-page 'disabled nil)
 (put 'upcase-region 'disabled nil)
 (put 'narrow-to-region 'disabled nil)
 (put 'downcase-region 'disabled nil)
 (put 'scroll-left 'disabled nil)
 (put 'scroll-right 'disabled nil)
 (put 'set-goal-column 'disabled nil)

 ;; large file warning
 (setq large-file-warning-threshold (* 15 1024 1024))
 #+end_src
** Emacs Server
 #+begin_src emacs-lisp
(server-start)
;(require 'server)

;(setq server-port    52698)
;(setq server-use-tcp t)

(defun server-start-and-copy ()
  (server-start)
  (copy-file "~/.emacs.d/server/server" "/Volumes/DJRuesch/.emacs.d/server/server" t))

;(add-hook 'emacs-startup-hook 'server-start-and-copy)

; (when (and (or (eq system-type 'windows-nt) (eq system-type 'darwin))
 ;	    (not (and (boundp 'server-clients) server-clients))
 ;	    (not (daemonp)))
  ; (server-start))

#+end_src#+end_src#+TITLE: My Emacs Configuration
#+AUTHOR: Del Ruesch
#+EMAIL: djruesch@gmail.com
#+STARTUP: overview
#+OPTIONS: num:nil
* User Information
#+begin_src emacs-lisp
(setq user-mail-address "djruesch@gmail.com")
(setq user-full-name  "Del Ruesch")
(setq add-log-mailing-address "reports.djruesch@gmail.com")

;; Location things
(setq calendar-latitude -34.38668232390036)
(setq calendar-longitude -70.84974847123787)
(setq calendar-location-name "Rengo, Chile")
#+end_src
* Load-Path
#+begin_src emacs-lisp
(let ((default-directory  "~/.emacs.d/site-lisp/"))
  (normal-top-level-add-subdirs-to-load-path))
#+end_src
* Straight Bootstrap
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+end_src
* Package Archives
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/")
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
)
#+end_src
